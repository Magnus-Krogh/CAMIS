---
title: "R vs SAS Satterthwaite Degrees of Freedom Method"
execute:
  eval: false
---

# R vs SAS Satterthwaite Degrees of Freedom Method

## Introduction of data and notation

The dataset is supposed to mimic a stage 3 clinical trial on Alzheimer's disease, with 6 observations per patient each taken during visits at 0, 6, 12, 18, 24 and 36 months. The measurement taken during each visit is the result from an ADAS-Cog (Alzheimer's Disease Assessment Scale - Cognitive Section) test, which is a scale ranging from 0 to 85 testing the memory and mental capabilities of the patient. Half of the patients are in an active treatment group ($act$) while the rest are in a placebo treatment group ($pbo$). A drop out factor is also employed, to resemble patients leaving the study. The data is simulated from a normal distribution with a given mean vector and variance-covariance matrix. The code used to generate the dataset is seen below:

```{r}
simulate_trial <- function(n_arm = 500, # Number of patients per group
                           M = c(0, 6, 12, 18, 24, 36), # Months in which an observation is to be taken
                           drop_out = 0, # Drop out factor
                           mean_pbo, # Mean values for visits in the placebo group
                           mean_act, # Mean values for visits in the active group
                           cov_sqrt) { #Cholesky Decomposition of Variance-Covariance matrix
  
  # Simulate data
  m <- length(M) # Number of measurements per patient
  y_pbo <- cov_sqrt %*% matrix(rnorm(m * n_arm), nrow = m) + mean_pbo # Create the measurements for the placebo group
  y_act <- cov_sqrt %*% matrix(rnorm(m * n_arm), nrow = m) + mean_act # Create the measurements for the active group
  
  # Create dataset
  dat <- data.frame(id = rep(1:(2 * n_arm), each = m), # Patient IDs
                    visit = factor(rep(1:m, 2 * n_arm)), # Visits
                    M = rep(M, n_arm), # Months since baseline
                    y = c(as.numeric(y_pbo), as.numeric(y_act)), # Outcome measure
                    trt = factor(rep(c('pbo', 'act'), each = n_arm * m)), # Treatment arm
                    act = rep(c(0, 1), each = n_arm * m)) # Dummy treatment arm
  
  dat$mod_trt <- dat$trt
  dat$mod_trt[dat$M == 0] <- 'pbo' # Cast 
  dat$act <- as.numeric(dat$trt == 'act')
  dat$act_vis <- with(dat, interaction(mod_trt, M))
  
  # Implement per-visit drop out
  for (v in M) {
    ids <- unique(subset(dat, M >= v)$id) # Find number of patients left in study
    # Sample 
    id_rm <- sample(ids, 
                    size = floor(length(ids) * drop_out)) # Sample drop_out percentage of patients still in the study
    dat <- subset(dat, !(M >= v & (id %in% id_rm))) # Remove sampled patients from study
  }
  
  return(dat) 
}

```

Running below creates an example of a simulated dataset seen below the code:

```{r}
mean_pbo <- c(19.6, 20.5, 20.9, 22.7, 23.8, 27.4) #Mean values of placebo group
mean_act <- approx(x = c(0, 6, 12, 18, 24, 36), 
                   y = mean_pbo,
                   xout = 0.8 * c(0, 6, 12, 18, 24, 36))$y #Mean values of active group
cov_adni2 <- matrix(1,6,6) * 67 + diag(6) * 30 # Variance-Covariance matrix
cov_sqrt2 <- t(chol(cov_adni2)) #Cholesky decomposition of Variance-Covaraince matrix
set.seed(131)
dat <- simulate_trial(n_arm = 500, drop_out = 0.1,
                      mean_pbo = mean_pbo,
                      mean_act = mean_act,
                      cov_sqrt = cov_sqrt2)
```

| id         | visit      | M          | y          | act_vis    |
|------------|------------|------------|------------|------------|
| 1          | 1          | 0          | 11.5353    | pbo.0      |
| 1          | 2          | 6          | 11.0563    | pbo.6      |
| 2          | 1          | 0          | 30.4709    | pbo.0      |
| 2          | 2          | 6          | 28.4217    | pbo.6      |
| 2          | 3          | 12         | 17.0752    | pbo.12     |
| 2          | 4          | 18         | 31.7247    | pbo.18     |
| 2          | 5          | 24         | 24.3923    | pbo.24     |
| 2          | 6          | 36         | 33.818     | pbo.36     |
| 3          | 1          | 0          | 21.6565    | pbo.0      |
| 3          | 2          | 6          | 31.918     | pbo.6      |
| $$\vdots$$ | $$\vdots$$ | $$\vdots$$ | $$\vdots$$ | $$\vdots$$ |
| 1000       | 1          | 0          | 28.9886    | pbo.0      |

The datasets will be simulated in R and then used by both LMER in R and PROC MIXED in SAS. The mean vectors for the groups are given by $$\mu_{\text{pbo}} = \begin{bmatrix} 19.6 \\ 20.5 \\ 20.6 \\ 22.7 \\ 23.8 \\ 27.4 \end{bmatrix} \text{ and } \mu_{\text{act}} = \begin{bmatrix} 19.6 \\ 20.32 \\ 20.74 \\ 21.62 \\ 22.92 \\ 25.24\end{bmatrix}.$$

## Basic Model, Estimates, and Hypothesis Test of Contrast

First a simulated dataset constructed from a simple Variance-Covariance matrix given by $$\Sigma = 67 \cdot J_6 + 30 \cdot I_6,$$ where $J_6$ is the 6 times 6 matrix with 1 in every entry, and $I_6$ is the 6 times 6 identity matrix. The model used for this dataset will consist of a parameter for each mean value and a random intercept. Code used to estimate the parameters are given below

```{r}
set.seed(129)
dat <- simulate_trial(n_arm = 500, drop_out = 0.2,
                      mean_pbo = mean_pbo,
                      mean_act = mean_act,
                      cov_sqrt = cov_sqrt2)
lmertest_model <- lmerTest::lmer(y ~ 0 + act_vis + (1|id), data = dat, REML = TRUE)
summary(lmertest_model)
```

``` sas
proc mixed data=sim_data method=reml;
   class id act_vis;
   model y = act_vis / NOINT solution;
   random intercept / G type=un subject=id;
   ods output FitStatistics = fit;
run;
```

## Same as above, but now with tau\^2 = 80 and sigma\^2 = 0.001

## Unstructured Variance-Covariance Matrix for Data Simulation

## Model with Random Slope and Estimates

## Degrees of Freedom Plot and Differences between the Two Procedures
